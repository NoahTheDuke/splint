; This Source Code Form is subject to the terms of the Mozilla Public
; License, v. 2.0. If a copy of the MPL was not distributed with this
; file, You can obtain one at https://mozilla.org/MPL/2.0/.

{;; Please keep this sorted and split by genre

 ;; Lint Rules

 lint/assoc-fn
 {:description "`assoc`-ing an update with the same key is harder to read than `update`."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/body-unquote-splicing
 {:description "Using unquote-splicing on a body in a macro can lead to subtly broken code that's hard to debug."
  :enabled true
  :added "1.0"
  :updated "1.0"
  :links ["https://blog.ambrosebs.com/2022/09/08/break-your-macros.html"]}

 lint/divide-by-one
 {:description "Dividing by 1 is a no-op."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/dorun-map
 {:description "Prefer `run!` to `(dorun (map ...))`."
  :enabled true
  :added "0.1"
  :updated "1.2.1"}

 lint/dot-class-method
 {:description "Prefer `(Obj/method)` to `(. Obj method)`."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/dot-obj-method
 {:description "Prefer `(.method obj)` to `(. obj method)`."
  :enabled true
  :added "0.1"
  :updated "1.15.2"
  :supported-styles [:dot :method-value]
  :chosen-style :dot}

 lint/duplicate-case-test
 {:description "Warn if there are duplicate test constants in a `case` call."
  :enabled true
  :added "<<next>>"
  :updated "<<next>>"
  :links ["https://clojuredocs.org/clojure.core/case"
          "https://github.com/clj-kondo/clj-kondo/blob/18448daa0ca2b53b2dddce5773f641bed3b5fc85/doc/linters.md#duplicate-case-test"]}

 lint/duplicate-field-name
 {:description "`defrecord` and `deftype` don't allow duplicate field names."
  :enabled true
  :added "0.1.119"
  :updated "0.1.119"}

 lint/fn-wrapper
 {:description "Avoid wrapping functions in pass-through anonymous function defitions."
  :enabled true
  :added "0.1"
  :updated "0.1"
  :guide-ref "#no-useless-anonymous-fns"}

 lint/if-else-nil
 {:description "Prefer `when` to `(if x y nil)`."
  :enabled true
  :added "0.1"
  :updated "0.1"
  :guide-ref "#when-instead-of-single-branch-if"}

 lint/if-let-else-nil
 {:description "Prefer `when-let` to `(if-let [x (abc)] x nil)`."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/if-nil-else
 {:description "Prefer `when-not` to `(if x nil y)`."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/if-not-both
 {:description "Prefer `if-not` to `(if (not x) y z)`."
  :enabled true
  :added "0.1"
  :updated "0.1"
  :guide-ref "#if-not"}

 lint/if-not-do
 {:description "Prefer `when-not` to `(if-not x (do y))`."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/if-not-not
 {:description "Prefer `if` to `(if-not (not x) y z)`."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/if-same-truthy
 {:description "Prefer `or` to `(if x x y)`."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/into-literal
 {:description "Prefer `vec` or `set` to `(into [] ...)`."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/let-if
 {:description "Prefer `if-let` to `(let [x (abc)] (if x y z))`."
  :enabled true
  :added "0.1.69"
  :updated "0.1.69"
  :guide-ref "#if-let"}

 lint/let-when
 {:description "Prefer `when-let` to `(let [x (abc)] (when x y z))`."
  :enabled true
  :added "0.1.69"
  :updated "0.1.69"
  :guide-ref "#when-let"}

 lint/loop-do
 {:description "`loop` has an implicit `do`."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/loop-empty-when
 {:description "Prefer `while` to empty loops with `when`s."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/missing-body-in-when
 {:description "`when` calls should have at least 1 expression after the condition."
  :enabled true
  :added "0.1.69"
  :updated "0.1.69"}

 lint/not-empty?
 {:description "Looks for `(not (empty?))` which matters for nil-punning."
  :enabled true
  :added "0.1"
  :updated "1.2.0"
  :chosen-style :seq
  :supported-styles [:seq :not-empty]
  :guide-ref "#nil-punning"}

 lint/prefer-method-values
 {:description "Use uniform Class/member syntax when writing interop."
  :enabled true
  :added "1.13"
  :updated "1.13"
  :links ["https://clojure.org/news/2024/04/28/clojure-1-12-alpha10#method_values"]}

 lint/prefer-require-over-use
 {:description "`use` is conventionally deprecated."
  :enabled true
  :added "1.3.0"
  :updated "1.3.0"
  :chosen-style :as
  :supported-styles [:as :refer :all]
  :guide-ref "#prefer-require-over-use"}

 lint/redundant-call
 {:description "Certain core functions return the arg when given a single arg."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/redundant-str-call
 {:description "Avoid calls to `str` on string literals or calls to `str` or `format`."
  :enabled true
  :added "<<next>>"
  :updated "<<next>>"}

 lint/require-explicit-param-tags
 {:description "Require explicit :param-tags on method values."
  :enabled false
  :added "1.13"
  :updated "1.13"
  :chosen-style :wildcard
  :supported-styles [:both :missing :wildcard]
  :links ["https://insideclojure.org/2024/02/12/method-values"]}

 lint/take-repeatedly
 {:description "`repeatedly` has an arity for limiting the number of repeats with `take`."
  :enabled true
  :added "0.1"
  :updated "0.1"}

 lint/thread-macro-one-arg
 {:description "Prefer `(y x)` to `(-> x y)`."
  :enabled true
  :added "0.1"
  :updated "1.2.1"
  :chosen-style :inline
  :supported-styles [:inline :avoid-collections]}

 lint/try-splicing
 {:description "Using unquote-splicing in a try in a macro can lead to subtly broken code that's hard to debug."
  :enabled true
  :added "1.0"
  :updated "1.0"
  :links ["https://blog.ambrosebs.com/2022/09/08/break-your-macros.html"]}

 lint/underscore-in-namespace
 {:description "Underscores in namespaces can lead to problems so should be avoided."
  :enabled true
  :added "1.11"
  :updated "1.11"}

 lint/warn-on-reflection
 {:description "Always set *warn-on-reflection* to avoid reflection in interop."
  :enabled false
  :added "1.8.0"
  :updated "1.8.0"
  :links ["http://clojure-goes-fast.com/blog/performance-nemesis-reflection"]}

 ;; Metrics Rules

 metrics/fn-length
 {:description "Avoid functions longer than 10 lines of code (default)."
  :enabled false
  :added "1.6.0"
  :updated "1.6.0"
  :chosen-style :body
  :supported-styles [:body :defn]
  :length 10
  :guide-ref "#function-length"}

 metrics/parameter-count
 {:description "Avoid parameter lists with more than 4 positional parameters (default)."
  :enabled false
  :added "1.7.0"
  :updated "1.7.0"
  :chosen-style :positional
  :supported-styles [:positional :include-rest]
  :count 4
  :guide-ref "#function-positional-parameter-limit"}

 ;; Naming Rules

 naming/conventional-aliases
 {:description "Prefer idiomatic aliases to alternatives."
  :enabled true
  :added "1.3.0"
  :updated "1.3.0"
  :guide-ref "#use-idiomatic-namespace-aliases"}

 naming/conversion-functions
 {:description "Use `->` instead of `to` in the names of conversion functions."
  :enabled true
  :added "0.1.94"
  :updated "0.1.94"
  :guide-ref "#naming-conversion-functions"}

 naming/lisp-case
 {:description "Prefer kebab-case to CapitalCase or camelCase or snake_case."
  :enabled true
  :added "1.3.0"
  :updated "1.3.0"
  :guide-ref "#naming-functions-and-variables"}

 naming/predicate
 {:description "Functions that return a boolean should end in a question mark."
  :enabled true
  :added "0.1.69"
  :updated "0.1.94"
  :guide-ref "#naming-predicates"}

 naming/record-name
 {:description "Records should use PascalCase."
  :enabled true
  :added "0.1.69"
  :updated "1.15.2"
  :guide-ref "#naming-protocols-records-structs-and-types"}

 naming/single-segment-namespace
 {:description "Avoid single-segment namespaces."
  :enabled true
  :added "1.3.0"
  :updated "1.3.0"
  :guide-ref "#no-single-segment-namespaces"}

 ;; Performance Rules

 performance/assoc-many
 {:description "Avoid calling assoc with multiple pairs."
  :enabled false
  :added "1.10.0"
  :updated "1.10.0"}

 performance/avoid-satisfies
 {:description "Avoid use of `satisfies?` as it is extremely slow."
  :enabled false
  :added "1.10.0"
  :updated "1.10.0"
  :links ["https://bsless.github.io/datahike-datalog-parser"]}

 performance/dot-equals
 {:description "Rely on `.equals` when comparing against string literals."
  :enabled false
  :added "1.11"
  :updated "1.11"}

 performance/get-in-literals
 {:description "Use keywords as functions instead of `get-in`."
  :enabled false
  :added "1.10.0"
  :updated "1.10.0"}

 performance/get-keyword
 {:description "Use keywords as functions instead of the polymorphic function `get`."
  :enabled false
  :added "1.10.0"
  :updated "1.10.0"}

 performance/into-transducer
 {:description "Prefer `(into [] (map f) coll)` to `(into [] (map f coll))`."
  :enabled false
  :added "1.11"
  :updated "1.11"
  :links ["https://bsless.github.io/code-smells"]}

 performance/single-literal-merge
 {:description "Prefer assoc over merge when merging a literal."
  :enabled false
  :chosen-style :single
  :supported-styles [:single :multiple]
  :added "1.11"
  :updated "1.11"}

 ;; Style Rules

 style/apply-str
 {:description "Check for round-about `clojure.string/reverse`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/apply-str-interpose
 {:description "Check for round-about `clojure.string/join`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/apply-str-reverse
 {:description "Check for round-about `clojure.string/reverse`"
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/assoc-assoc
 {:description "Prefer `assoc-in` to nested `assoc`s."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/cond-else
 {:description "Prefer `:else` as default branch of `cond`."
  :enabled true
  :added "0.1"
  :updated "0.1.85"
  :guide-ref "#else-keyword-in-cond"}

 style/conj-vector
 {:description "Prefer `vector` to `(conj [] ...)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/def-fn
 {:description "Prefer `(defn [])` to `(def (fn []))`."
  :enabled true
  :added "1.0"
  :updated "1.0"}

 style/eq-false
 {:description "Prefer `false?` to `(= x false)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/eq-nil
 {:description "Prefer `nil?` to `(= x nil)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/eq-true
 {:description "Prefer `true?` to `(= x true)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/eq-zero
 {:description "Prefer `zero?` to `(= x 0)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/filter-complement
 {:description "Prefer `remove` to `(filter (complement f) ...)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/filter-vec-filterv
 {:description "Prefer `filterv` to `(vec (filter f ...))`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/first-first
 {:description "Prefer `ffirst` to `(first (first x))`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/first-next
 {:description "Prefer `fnext` to `(first (next x))`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/is-eq-order
 {:description "With `clojure.test/is`, expected value should be first."
  :enabled true
  :added "1.15.0"
  :updated "1.15.0"}

 style/let-do
 {:description "`let` has an implicit `do`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/mapcat-apply-apply
 {:description "Prefer `mapcat` to `(apply concat (apply ...))`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/mapcat-concat-map
 {:description "Prefer `mapcat` to `(apply concat (map x y z))`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/minus-one
 {:description "Prefer `dec` to `(- x 1)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/minus-zero
 {:description "Subtracting 0 is a no-op."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/multiple-arity-order
 {:description "Sort the arities of functions from fewest to most arguments."
  :enabled true
  :added "1.3.0"
  :updated "1.3.0"
  :guide-ref "#multiple-arity-order"}

 style/multiply-by-one
 {:description "Multiplying by 1 is a no-op."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/multiply-by-zero
 {:description "Multiplying by 0 is the same as returning 0."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/neg-checks
 {:description "Prefer `neg?` to `(< num 0)` or `(> 0 num)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/nested-addition
 {:description "`+` takes a variable number of args."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/nested-multiply
 {:description "`*` takes a variable number of args."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/new-object
 {:description "Prefer `(X.)` or `(X/new)` to `(new X)`."
  :enabled true
  :added "0.1.69"
  :updated "1.15.2"
  :chosen-style :dot
  :supported-styles [:dot :method-value]}

 style/next-first
 {:description "Prefer `nfirst` to `(next (first x))`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/next-next
 {:description "Prefer `nnext` to `(next (next x))`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/not-eq
 {:description "Prefer `not=` to `(not (= x y))`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"
  :guide-ref "#not-equal"}

 style/not-nil?
 {:description "Prefer `some?` to `(not (nil? x))`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/not-some-pred
 {:description "Prefer `not-any?` to `(not (some f x))`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/plus-one
 {:description "Prefer `inc` to `(+ x 1)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/plus-zero
 {:description "Adding 0 is a no-op."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/pos-checks
 {:description "Prefer `pos?` to `(> num 0)` or `(< 0 num)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/prefer-boolean
 {:description "Prefer `boolean` to `(if x true false)`."
  :enabled true
  :added "0.1.69"
  :updated "0.1.69"
  :guide-ref "#converting-something-to-boolean"}

 style/prefer-clj-math
 {:description "Prefer clojure.math to interop."
  :enabled true
  :added "0.1.69"
  :updated "0.1.69"
  :guide-ref "#prefer-clojure-math-over-interop"}

 style/prefer-clj-string
 {:description "Prefer clojure.string to interop."
  :enabled true
  :added "1.9.0"
  :updated "1.9.0"
  :guide-ref "#prefer-clojure-string-over-interop"}

 style/prefer-condp
 {:description "Prefer `condp` to `cond` when testing same base case."
  :enabled true
  :added "0.1.69"
  :updated "1.0"
  :guide-ref "#condp"}

 style/prefer-for-with-literals
 {:description "Prefer `(for [item coll] {:a item})` over `(map #(hash-map :a %) coll)`."
  :enabled true
  :added "1.15.0"
  :updated "1.15.0"}

 style/prefer-vary-meta
 {:description "Prefer `vary-meta` to `(with-meta x (assoc (meta x) ...))`."
  :enabled true
  :added "0.1"
  :updated "0.1.69"}

 style/reduce-str
 {:description "Use clojure.string for efficient string concatenation."
  :enabled true
  :added "1.11"
  :updated "1.11"}

 style/redundant-let
 {:description "Merge nested `let`s."
  :enabled true
  :added "0.1.69"
  :updated "0.1.69"}

 style/redundant-regex-constructor
 {:description "Rely on regex literal."
  :enabled true
  :added "1.10.0"
  :updated "1.10.0"}

 style/set-literal-as-fn
 {:description "Prefer `case` to using `(#{:a :b :c} x)`."
  :enabled false
  :added "0.1.119"
  :updated "1.11"}

 style/single-key-in
 {:description "Prefer `assoc` to `assoc-in` when given a single element vec."
  :enabled true
  :added "0.1.69"
  :updated "0.1.69"}

 style/tostring
 {:description "Prefer `str` to interop `(.toString x)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/trivial-for
 {:description "Prefer `map` over trivial `for`."
  :enabled true
  :added "1.11"
  :updated "1.11"
  :links ["https://bsless.github.io/code-smells"]}

 style/update-in-assoc
 {:description "Prefer `assoc-in` to using `assoc` as the `f` in an `update-in`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/useless-do
 {:description "A single expression in a `do` is a no-op."
  :enabled true
  :added "0.1.69"
  :updated "1.2.0"}

 style/when-do
 {:description "`when` has an implicit `do`."
  :enabled true
  :added "0.1.69"
  :updated "1.2.0"}

 style/when-not-call
 {:description "Prefer `when-not` to `(when (not x) ...)`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/when-not-do
 {:description "`when-not` has an implicit `do`."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}

 style/when-not-empty?
 {:description "Prefer `(when (seq x) ...)` to `(when (not (empty? x)) ...)`."
  :enabled true
  :added "0.1"
  :updated "0.1.69"}

 style/when-not-not
 {:description "Use `when` instead of double negation."
  :enabled true
  :added "0.1"
  :updated "1.2.0"}}
